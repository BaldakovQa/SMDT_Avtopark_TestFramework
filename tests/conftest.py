from datetime import datetime
from pages.model_units import GenHandbookPage
from pages.types_units import HandbookPage
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from pages.login_page import LoginPage
from config import Config

@pytest.fixture(scope="session")
def driver():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Chrome –Ω–∞ –≤—Å—ë –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    options = Options()
    options.add_argument("--start-maximized")
    # options.add_argument("--headless")  # –í–∫–ª—é—á–∏ –¥–ª—è headless-—Ä–µ–∂–∏–º–∞
    service = Service()  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ chromedriver –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: Service('/path/to/chromedriver')
    driver = webdriver.Chrome(service=service, options=options)
    yield driver
    driver.quit()

@pytest.fixture(scope="session")
def authorized_driver(driver):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–∞–π—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–Ω –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å–µ—Å—Å–∏—é"""
    login_page = LoginPage(driver)
    login_page.login(Config.USERNAME, Config.PASSWORD)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
    assert "/dashboard" in driver.current_url, "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    yield driver

@pytest.fixture(scope="function")  # scope="function": –Ω–æ–≤–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
def model_name():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏ —Å timestamp (–Ω–∞–ø—Ä–∏–º–µ—Ä, TestUnitModel_20251006_222013)"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")  # –§–æ—Ä–º–∞—Ç: YYYYMMDD_HHMMSS
    model_name = f"TestUnitModel_{timestamp}"
    print(f"üß© –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–º—è –º–æ–¥–µ–ª–∏: {model_name}")
    return model_name

@pytest.fixture(scope="module")  # scope –º–æ–∂–Ω–æ: function, class, module, session
def model_name(authorized_driver):
    """–°–æ–∑–¥–∞—ë—Ç –º–æ–¥–µ–ª—å –∞–≥—Ä–µ–≥–∞—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–æ–≤"""
    page = GenHandbookPage(authorized_driver)
    name = page.add_model_unit()
    yield name  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –≤ —Ç–µ—Å—Ç
    print(f"üßπ –£–¥–∞–ª—è—é –º–æ–¥–µ–ª—å {name} –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞")
    try:
        page.archive_model_unit(name)
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å {name}: {e}")

@pytest.fixture
def created_model(authorized_driver):
    page = GenHandbookPage(authorized_driver)
    model_name = page.add_model_unit()  # —Å–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
    yield model_name

@pytest.fixture
def created_types(authorized_driver):
    page = HandbookPage(authorized_driver)
    types_name = page.add_types_units()  # ‚úÖ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
    yield types_name
